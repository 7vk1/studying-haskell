
==================== FINAL INTERFACE ====================
2017-10-28 18:25:44.345042 UTC

interface studying-haskell-0.1.0.0-8dLEzeTkcFO86AW1rTntdy:Wiki_99_Questions.Problem1 8002
  interface hash: 64f6d175db498495a62d9bf53f7d76db
  ABI hash: 0b2dabc71dfded4bea0a50687c2ab952
  export-list hash: c168c244e9682029a848f0a236784e42
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1f838a465bbc137442767af7132b0126
  sig of: Nothing
  used TH splices: False
  where
exports:
  Wiki_99_Questions.Problem1.myLast
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
e500105b0f1dbab279267385ccce10ae
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Wiki_99_Questions.Problem1.$trModule2
                   Wiki_99_Questions.Problem1.$trModule1) -}
356c4605a3255692068ee76c3bac9dd9
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Wiki_99_Questions.Problem1"#) -}
3a122f1e37071d0203acdd85aa58b020
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "studying-haskell-0.1.0.0-8dLEzeTkcFO86AW1rTntdy"#) -}
61b8646e80a9301fa40dcef0e0ba46ef
  myLast :: [a] -> a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: [a]) ->
                 case GHC.List.reverse1 @ a x (GHC.Types.[] @ a) of wild {
                   [] -> GHC.List.badHead @ a : x1 ds1 -> x1 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

