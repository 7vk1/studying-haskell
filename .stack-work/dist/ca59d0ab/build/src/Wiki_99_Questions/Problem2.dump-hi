
==================== FINAL INTERFACE ====================
2017-10-28 19:00:11.851214 UTC

interface studying-haskell-0.1.0.0-8dLEzeTkcFO86AW1rTntdy:Wiki_99_Questions.Problem2 8002
  interface hash: ee3319cfb0e4815da9e531ca42aba539
  ABI hash: e857439ec3a757c613e10588c981bdbd
  export-list hash: bd79bdf9fab4c57a07690a4fa41d599b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1f838a465bbc137442767af7132b0126
  sig of: Nothing
  used TH splices: False
  where
exports:
  Wiki_99_Questions.Problem2.myButLast
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
8776cf2d39b69c1ad3288f75855c14ed
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Wiki_99_Questions.Problem2.$trModule2
                   Wiki_99_Questions.Problem2.$trModule1) -}
4dd9ff89e295250a9a5f9154623b8882
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Wiki_99_Questions.Problem2"#) -}
7eed6b5a264749359ec1d0e649c470dc
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "studying-haskell-0.1.0.0-8dLEzeTkcFO86AW1rTntdy"#) -}
42dd7b9fdd5791285f5d0d8331570328
  myButLast :: [a] -> a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: [a]) ->
                 case GHC.List.reverse1 @ a x (GHC.Types.[] @ a) of wild {
                   [] -> case GHC.List.scanl2 ret_ty a of {}
                   : ds1 xs -> GHC.List.head @ a xs }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

